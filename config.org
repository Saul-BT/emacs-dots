#+STARTUP: overview
#+TITLE: Saul-bt's Emacs
#+CREATOR: Saul Blanco Tejero (@elGolpista)
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
[[./img/screenshot.png]]
* Variables
#+BEGIN_SRC emacs-lisp
  (defvar bg-darker-color "#25262B")
#+END_SRC

* Keybindings
** Buffers
Kill current buffer by overriding "C-x k" keybinding
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC

** Windows
*** Resize windows
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+END_SRC

*** Follow windows when split
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** Org
*** Src editting
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp
;;  (setq show-week-agenda-p t)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

** Config reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Terminal
** Making bash as default shell for ansi-term
#+BEGIN_SRC emacs-lisp
  (defvar term-shell "/bin/bash") 
  (defadvice ansi-term (before force-bash)
     (interactive (list term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* Packages
** Didactic
*** Which-key
For friendly suggestions in the mini-buffer
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+END_SRC

** Styling
*** Beacon
Know cursor position with a cool animation
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode t))
#+END_SRC

*** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :config
    (when (not (member "all-the-icons" (font-family-list)))
      (all-the-icons-install-fonts t)))
#+END_SRC

*** Dashboard
Beautiful startup buffer
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome master :D")
    (setq dashboard-startup-banner "~/.emacs.d/img/logo.png")
    (setq dashboard-set-file-icons t)
    (setq dashboard-navigator-buttons
	  `(;; line1
	    ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
	      "GitHub" "Go to GitHub"
	      (lambda (&rest _) (browse-url "https://github.com")))

	     (,(all-the-icons-octicon "tools" :height 1.1 :v-adjust 0.0)
	      "Config" "Open Configuration"
	      (lambda (&rest _) (find-file "~/.emacs.d/config.org")))))))
  (setq dashboard-set-navigator t)
#+END_SRC

** Useful
*** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

*** Swiper
ISearch with super powers
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config (global-set-key "\C-s" 'swiper))
#+END_SRC

*** Popup kill ring
A friendly way to work with the kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

** Programming
*** Rainbow delimiters
Paints delimiters by nest level
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** Company auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

* Theme
** Dracula theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure t
    :init (load-theme 'dracula t))
#+END_SRC

* Misc
** GUI sucks
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
  (set-face-background 'hl-line bg-darker-color)
#+END_SRC

** Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** IDO
Friendly suggestions for do things
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** Prevent file backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

** Normal scroll behavior
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Bigger line spacing
#+BEGIN_SRC emacs-lisp
  (defun set-bigger-spacing ()
    (setq-local default-text-properties '(line-spacing 0.16 line-height 1.16)))
  (add-hook 'text-mode-hook 'set-bigger-spacing)
  (add-hook 'prog-mode-hook 'set-bigger-spacing)
#+END_SRC

** Subwords
This mode lets you to cycle through sub-words
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Auto-closing
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC

** Show Line and Column number on the modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
